{"version":3,"sources":["features/filter.ts","features/currentTodo.ts","features/todos.ts","app/store.ts","app/hooks.ts","features/Selectors.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","App.tsx","index.tsx"],"names":["FilterActionType","currentTodoReducer","state","action","type","TodosActionType","FILTER_ACTIONS_CREATOR","query","SetQuery","payload","status","SetStatus","filterReducer","filterState","TODO_ACTIONS_CREATOR","todos","LoadTodos","todosReducer","todosState","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","SELECTORS","todo","isMatchQuery","title","toLowerCase","includes","completed","TodoList","filteredTodos","className","length","map","id","TodoFilter","dispatch","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","isLoading","setIsLoading","useEffect","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34fefdc5.chunk.js","sourcesContent":["import { Action } from '../types/Action';\nimport { Status } from '../types/Status';\n\nexport enum FilterActionType {\n  SetQuery = 'filter/set_query',\n  SetStatus = 'filter/set_status',\n}\n\ntype SetQueryAction = Action<FilterActionType.SetQuery, string>;\ntype SetStatusAction = Action<FilterActionType.SetStatus, Status>;\n\ntype FilterActions = SetQueryAction | SetStatusAction;\n\nexport interface FileterState {\n  query: string,\n  status: Status,\n}\n\nconst setQueryActionCreator = (query: string): SetQueryAction => ({\n  type: FilterActionType.SetQuery,\n  payload: query,\n});\n\nconst setStatusActionCreator = (status: Status): SetStatusAction => ({\n  type: FilterActionType.SetStatus,\n  payload: status,\n});\n\nexport const FILTER_ACTIONS_CREATOR = {\n  setQuery: setQueryActionCreator,\n  setStatus: setStatusActionCreator,\n};\n\nconst filterReducer = (\n  filterState: FileterState = { query: '', status: 'all' },\n  action: FilterActions,\n): FileterState => {\n  switch (action.type) {\n    case FilterActionType.SetQuery:\n      return {\n        ...filterState,\n        query: action.payload,\n      };\n\n    case FilterActionType.SetStatus:\n      return {\n        ...filterState,\n        status: action.payload,\n      };\n\n    default:\n      return filterState;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Action } from '../types/Action';\nimport { Todo } from '../types/Todo';\n\nexport enum TodosActionType {\n  LoadTodos = 'todos/load_todos',\n  // AddTodo = 'todos/add_todo',\n}\n\ntype LoadTodosAction = Action<TodosActionType.LoadTodos, Todo[]>;\n\ntype TodosActions = LoadTodosAction;\n\nconst loadTodosActionCreator = (todos: Todo[]): LoadTodosAction => ({\n  type: TodosActionType.LoadTodos,\n  payload: todos,\n});\n\nexport const TODO_ACTIONS_CREATOR = {\n  load: loadTodosActionCreator,\n};\n\nconst todosReducer = (\n  todosState: Todo[] = [],\n  action: TodosActions,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActionType.LoadTodos:\n      return action.payload;\n\n    default:\n      return todosState;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RootState } from '../app/store';\nimport { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nconst todosSelector = (state: RootState): Todo[] => state.todos;\nconst filteredTodosSelector = (state: RootState): Todo[] => {\n  const { todos, filter } = state;\n\n  return todos.filter((todo) => {\n    const isMatchQuery = todo\n      .title\n      .toLowerCase()\n      .includes(filter.query.toLowerCase());\n\n    switch (filter.status) {\n      case 'all':\n        return isMatchQuery;\n\n      case 'active':\n        return isMatchQuery && !todo.completed;\n\n      case 'completed':\n        return isMatchQuery && todo.completed;\n\n      default:\n        return true;\n    }\n  });\n};\n\nconst filterQuerySelector = (state: RootState): string => state.filter.query;\nconst filterSatusSelector = (state: RootState): Status => state.filter.status;\n\nexport const SELECTORS = {\n  todos: todosSelector,\n  filteredTodos: filteredTodosSelector,\n  query: filterQuerySelector,\n  status: filterSatusSelector,\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { SELECTORS } from '../../features/Selectors';\n\nexport const TodoList: React.FC = () => {\n  const filteredTodos = useAppSelector(SELECTORS.filteredTodos);\n\n  return (\n    <>\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.length > 0 && filteredTodos.map(todo => (\n            <tr data-cy=\"todo\">\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={`has-text-${todo.completed ? 'success' : 'danger'}`}>\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n          <tr data-cy=\"todo\" className=\"has-background-info-light\">\n            <td className=\"is-vcentered\">3</td>\n            <td className=\"is-vcentered\"> </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className=\"has-text-danger\">fugiat veniam minus</p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                <span className=\"icon\">\n                  <i className=\"far fa-eye-slash\" />\n                </span>\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { FILTER_ACTIONS_CREATOR } from '../../features/filter';\nimport { SELECTORS } from '../../features/Selectors';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(SELECTORS.query);\n  const status = useAppSelector(SELECTORS.status);\n  const dispatch = useAppDispatch();\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => dispatch(\n              FILTER_ACTIONS_CREATOR.setStatus(event.target.value as Status),\n            )}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => dispatch(\n            FILTER_ACTIONS_CREATOR.setQuery(event.target.value),\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch } from './app/hooks';\nimport { TODO_ACTIONS_CREATOR } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((todos) => dispatch(TODO_ACTIONS_CREATOR.load(todos)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {false && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}